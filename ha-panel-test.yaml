substitutions:
  watt:               "\U000F0241"
  television:         "\U0000E9DE"
  power:              "\U0000E907"
  temp_icon:          "\uF50F"
  temp:               "\U000F050F"
  icon_0000:          "\U00000000"
  icon_0001:          "\U00000001"
  icon_space:         "\U00000020"
  ceiling_light1:     "\U0000E904"
  icon_e948:          "\U0000E948"
  icon_e9f7:          "\U0000E9f7"
  icon_e900:          "\U0000E900"
  icon_e901:          "\U0000E901"
  icon_e902:          "\U0000E902"
  icon_e903:          "\U0000E903"
  icon_e905:          "\U0000E905"
  icon_e906:          "\U0000E906"
  icon_e918:          "\U0000E918"
  icon_e90D:          "\U0000E90D"
  icon_e9c5:          "\U0000E9C5"
  icon_e950:          "\U0000E950"
  icon_e9df:          "\U0000E9DF"
  icon_e9ed:          "\U0000E9ED"
  volume_plus:        "\U000f075d"
  volume_minus:       "\U000f075e"
  volume_mute:        "\U000f075f"
  radio:              "\U000F0439"
  speaker:            "\U000F04C3"
  stop:               "\U000F04DB"
  up:                 "\U000F005D"
  down:               "\U000F0045"
  lightbulb:          "\U000F1802"
  snowflake:          "\U000F1A3C"
  power_off:          "\U000F0114"
  lamp:               "\U000F06B5"
  floor_lamp:         "\U000F08DD"
  string_lights:      "\U000F12BA"
  track_light:        "\U000F0914"
  bulkhead_light:     "\U000F1A2F"
  led_strip:          "\U000F07D6"
  coach_lamp:         "\U000F1020"
  bed:                "\U000F02E3"
  heating:            "\U0000e908"
  ha:                 "\U0000e90b"
  boiler_on:          "\U000F0238"
  color_temp:         "\U0000e90c"
  humidity:           "\U0000e912"
  temperature:        "\U0000e915"
  illumination:       "\U0000e916"
  empty:              "\U000F01A9"
  vacuum_cleaner:     "\U0000e918"
  logo:               "\U0000e919"
  thermostat:         "\U0000e901"
  boiler_off:         "\U000F1722"
  motion:             "\U0000e907"
  radiator:           "\U000F0636"
  radiator2:          "\U000f0438"
  ceiling_light:      "\U000F0769"
  house_temp:         "\U000F0F55"
  uv_state:           "\U000F0F2F"
  cloudy:             "\U000F0590"
  cloudyalert:        "\U000F0F2F"
  cloudyarrowright:   "\U000F0E6E"
  fog:                "\U000F0591"
  hail:               "\U000F0592"
  hazy:               "\U000F0F30"
  hurricane:          "\U000F0898"
  lightning:          "\U000F0593"
  lightningrainy:     "\U000F067E"
  night:              "\U000F0594"
  nightpartlycloudy:  "\U000F0F31"
  partlycloudy:       "\U000F0595"
  partlylightning:    "\U000F0F32"
  partlyrainy:        "\U000F0F33"
  partlysnowy:        "\U000F0F34"
  partlysnowyrainy:   "\U000F0F35"
  pouring:            "\U000F0596"
  rainy:              "\U000F0597"
  snowy:              "\U000F0598"
  snowyheavy:         "\U000F0F36"
  snowyrainy:         "\U000F067F"
  sunny:              "\U000F0599"
  sunnyalert:         "\U000F0F37"
  sunnyoff:           "\U000F14E4"
  sunset:             "\U000F059A"
  sunsetdown:         "\U000F059B"
  sunsetup:           "\U000F059C"
  tornado:            "\U000F0F38"
  windy:              "\U000F059D"
  windyvariant:       "\U000F059E"
  happyface:          "\U000F01F5"
  wifi_25:            "\U0000E90E"
  wifi_50:            "\U0000E90F"
  wifi_75:            "\U0000E910"
  wifi_100:           "\U0000E911"

esphome:
  name: ha-panel-1
  friendly_name: HA panel 1
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    then:
      - delay: 5s
      - lvgl.widget.hide: boot_screen
      - delay: 10s
      - script.execute: screen_light

font: !include display/fonts.yaml
image: !include display/images.yaml

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz

logger:
#  level: VERY_VERBOSE

api:
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.label.update:
              id: ha_status
              text_color: 0x56acfa #blau

  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.label.update:
              id: ha_status
              text_color: 0xfa3744 #red

ota:
  - platform: esphome
    password: !secret ota_password
wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
#  ap:
#    ssid: "Ha-Panel-1 Fallback Hotspot"
#    password: !secret wifi_password

captive_portal:

#external_components:
#  - source: github://clydebarrow/esphome
#    refresh: 10min
#    components: [ lvgl ]

#-----------------------------------------------------------------------------------------------------------
# Content
#------------------------------------------- 
lvgl:
  displays:
    - my_display
  touchscreens:
    - my_touchscreen

  theme:
    button:
      bg_color: 0x333333 #grau
      bg_opa: 85%
      border_color: 0x333333
      border_width: 0
      text_color: 0xFFFFFF #white
      pressed:
        bg_color: 0xFFFFFF #0x111111 dunkelgrau
        bg_grad_color: 0xFFFFFF #white #111111 #black
      checked:
        bg_color: 0xFFFFFF #0x111111
        bg_grad_color: 0xFFFFFF #0x111111
        text_color: 0x56acfa #blau #f6ff00 #gelb
    buttonmatrix:
      bg_opa: TRANSP
      border_color: 0x333333
      border_width: 0
      text_color: 0xFFFFFF
      pad_all: 0
      items:
        bg_color: 0x333333
        bg_grad_color: 0x333333
        bg_grad_dir: VER
        bg_opa: COVER
        border_color: 0x333333
        border_width: 1
        text_color: 0xFFFFFF
        pressed:
          bg_color: 0xffffff #111111
          bg_grad_color: 0xffffff #111111
        checked:
          bg_color: 0xffffff #111111
          bg_grad_color: 0xffffff #111111
          text_color: 0xEEEEEE #light gray
    switch:
      bg_color: 0xC0C0C0 #helleres grau
      bg_grad_color: 0xb0b0b0 #hell grau
      bg_grad_dir: VER
      bg_opa: COVER
      checked:
        bg_color: 0x56acfa #blau
        bg_grad_color: 0x03324A
        bg_grad_dir: VER
        bg_opa: COVER
      knob:
        bg_color: 0xFFFFFF
        bg_grad_color: 0xC0C0C0
        bg_grad_dir: VER
        bg_opa: COVER
    slider:
      border_width: 1
      border_opa: 30%
      bg_color: 0x333333 #0x9c9c9c
      bg_opa: 15%
      indicator:
        bg_color: 0x333333
        bg_grad_color: 0x333333
        bg_opa: COVER
      knob:
        bg_color: 0x444444
        bg_grad_color: 0x444444
        bg_opa: COVER
        border_color: 0x444444
        border_width: 1
        text_color: 0xFFFFFF

  style_definitions:
    - id: button_icon
      text_font: icon_font
      text_color: 0xFFFFFF
    - id: header_footer
      bg_color: 0x444444
      bg_grad_color: 0x444444
      bg_grad_dir: VER
      bg_opa: COVER
      border_width: 0
      radius: 0
      pad_all: 0
      pad_row: 0
      pad_column: 0
      border_color: 0x333333
      text_color: 0xFFFFFF
      width: 100%
      height: 40
    - id: wifi_icon_style
      text_font: icon_font
      text_color: 0xFFFFFF
    - id: motion_style
      text_font: icon_font
      text_color: 0xFFFFFF
    - id: heating_style
      text_font: icon_font
      text_color: 0xFF8000
##############################################################
  top_layer:
    widgets:
      - label:
          id: wifi_status
          align: top_right
          x: -2
          y: 2
          text_align: right
          text: "${wifi_25}"
          text_color: 0xFFFFFF
          text_font: icons_24
      - label:
          id: motion_status
          align: top_left
          x: 2
          y: 2
          text: "${motion}"
          text_color: 0xFFFFFF
          text_font: icons_24
      - label:
          id: heating_status
          x: 32
          y: 2
          text: "${heating}"
          text_color: 0xFF8000
          text_font: icons_24
      # Home Assistant status
      - label:
          id: ha_status
          align: TOP_RIGHT
          x: -35
          y: 2
          text: "${ha}"
          text_color: 0xFFFFFF
          text_font: icons_24
      - buttonmatrix:
          id: top_layer
          align: bottom_mid
          styles: header_footer
          pad_all: 0
          outline_width: 0
          items:
            styles: header_footer
          rows:
            - buttons:
                - id: page_prev
                  text: "\uF053"
                  on_press:
                    then:
                      - lambda: |-
                          id(current_page)--;
                          if (id(current_page) < 0) id(current_page) = 4;
                          id(is_standby_active) = false;
                          id(last_manual_action) = millis();
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 0;'
                          then:
                            - lvgl.page.show: clock_page
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 1;'
                          then:
                            - lvgl.page.show: heating_page
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 2;'
                          then:
                            - lvgl.page.show: heating_page2
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 3;'
                          then:
                            - lvgl.page.show: page_thermostat
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 4;'
                          then:
                            - lvgl.page.show: cover_page

                - id: page_home
                  text: "\uF015"
                  on_press:
                    then:
                      - lambda: |-
                          id(current_page) = 0;  // Set current_page to 0 for the clock_page
                          id(is_standby_active) = false;
                          id(last_manual_action) = millis();
                      - lvgl.page.show: clock_page

                - id: page_next
                  text: "\uF054"
                  on_press:
                    then:
                      - lambda: |-
                          id(current_page)++;
                          if (id(current_page) > 4) id(current_page) = 0;
                          id(is_standby_active) = false;
                          id(last_manual_action) = millis();
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 0;'
                          then:
                            - lvgl.page.show: clock_page
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 1;'
                          then:
                            - lvgl.page.show: heating_page
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 2;'
                          then:
                            - lvgl.page.show: heating_page2
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 3;'
                          then:
                            - lvgl.page.show: page_thermostat
                      - if:
                          condition:
                            lambda: 'return id(current_page) == 4;'
                          then:
                            - lvgl.page.show: cover_page


      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 100%
          height: 100%
          bg_color: 0x000000
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - image:
                align: CENTER
                src: boot_logo
                y: -90
            - spinner:
                align: CENTER
                y: 95
                height: 50
                width: 50
                spin_time: 1s
                arc_length: 60deg
                arc_width: 8
                indicator:
                  arc_color: 0x18bcf2
                  arc_width: 8
          on_press:
            - lvgl.widget.hide: boot_screen

  page_wrap: true
  pages:
    - id: standby_page
      bg_color: 0x111111
      widgets:
        - label:
            id: full_touch_catcher
            text: ""
            width: 100%
            height: 100%
            text_color: 0x000000
            align: center
            on_click:
              then:
                - script.execute: touch_wakeup #ohne reagiert das verlassen des standby nur über die footer tasten
        - label:
            id: standby_time
            text_font: roboto90
            text: "00:00"
            align: CENTER
            text_color: 0xAAAAAA  # hellgrau
        - label:
            id: display_date_standby
            text_font: nunito_48
            text: "date"
            align: bottom_mid
            text_color: 0xAAAAAA  # hellgrau
            y: -45
        - label:
            align: top_mid
            id: display_weather_icon_standby
            text: $happyface
            text_color: 0xAAAAAA
            bg_opa: TRANSP
            text_font: weather_icons
            y: 60
        - label:
            align: CENTER
            id: display_weather_standby
            text: "weather"
            text_font: regular18
            text_color: 0xAAAAAA
            y: 110
        - label:
            align: top_mid
            id: display_temp_standby
            text: "temp"
            text_font: roboto24
            text_color: 0xAAAAAA
            y: 2
    - id: clock_page
      widgets:
        - image:
            align: CENTER
            src: back1
        - label:
            align: CENTER
            id: display_weather_icon
            text: $happyface
            text_color: 0xFFFFFF
            bg_opa: TRANSP
            text_font: weather_icons
            y: -160
            x: -75
        - label:
            align: CENTER
            id: display_date
            text: "date"
            text_font: roboto40
            text_color: 0xFFFFFF
            y: -80
            x: -75
        - label:
            align: CENTER
            id: display_time
            text: "clock"
            text_font: roboto90
            text_color: 0xFFFFFF
            y: -15
            x: -75
        - label:
            align: CENTER
            id: display_weather
            text: "weather"
            text_font: regular18
            text_color: 0xFFFFFF
            y: 70
            x: -75
        - label:
            align: CENTER
            id: display_temp
            text: "temp"
            text_font: roboto24
            text_color: 0xFFFFFF
            y: 110
            x: -75
        - label:
            align: CENTER
            id: display_house_temp
            text: "house temp"
            text_font: roboto24
            text_color: 0xFFFFFF
            y: 145
            x: -75
        - label:
            align: CENTER
            id: display_uv_index
            text: "uv"
            x: -75
            y: 180
            text_font: roboto24
            text_color: 0xFFFFFF
        - obj:
            align: CENTER
            width: 150
            height: 480
            bg_opa: 30%
            border_opa: TRANSP
            pad_all: 5
            x: 164
            y: 0
            widgets:
              - button:
                  id: living_room_light_l1_btn
                  align: CENTER
                  width: 100
                  height: 100
                  y: -120
                  checkable: true
                  widgets:
                    - label:
                        text_font: btn_icons_font2
                        text: "$ceiling_light"
                        align: CENTER
                    - label:
                        text: "Decke"
                        long_mode: dot
                        align: CENTER
                        y: 30
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.schlafzimmer_relay_1

              - button:
                  id: living_room_light_l2_btn
                  align: CENTER
                  width: 100
                  height: 100
                  y: 0
                  checkable: true
                  widgets:
                    - label:
                        text_font: btn_icons_font2
                        text: "$bed"
                        align: CENTER
                    - label:
                        text: "Bett"
                        long_mode: dot
                        align: CENTER
                        y: 30
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.schlafzimmerbett
                          brightness: !lambda "return id(dimmer_level);"
              - button:
                  id: living_room_light_l3_btn
                  align: CENTER
                  width: 100
                  height: 100
                  y: 120
                  checkable: true
                  widgets:
                    - label:
                        text_font: btn_icons_font2
                        text: "$lamp"
                        align: CENTER
                    - label:
                        text: "Tisch"
                        long_mode: dot
                        align: CENTER
                        y: 30
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.color_temperature_light_23
                          brightness: !lambda "return id(dimmer_level);"

    - id: heating_page
      widgets:
        - image:
            align: CENTER
            src: back6
        - obj: # a properly placed coontainer object for all these controls
            layout: # enable the GRID layout for the children widgets
              type: GRID # split the rows and the columns proportionally
              grid_columns: [FR(1), FR(1), FR(1)] # equal
              grid_rows: [FR(50), FR(50)] # like percents
            width: 100%
            height: 90%
            #align: CENTER
            pad_all: 15
            pad_top: 22
            #pad_row: 6
            #pad_column: 2
            bg_opa: TRANSP
            border_opa: TRANSP
            widgets:
              - button:
                  id: boiler_heating_btn
                  checkable: true
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $ceiling_light1
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Decke"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    # Label für die Temperatur oben rechts
                    - label:
                        id: room_temp_label
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    # Icon für Heizung oben links
                    - label:
                        id: heating_icon_label
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.schlafzimmer_relay_1

              - button:
                  id: bedroom_heating_btn
                  checkable: true
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: btn_icons_font
                        text: $bed
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Bett"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - slider:
                        id: lv_button_1_slider
                        align: bottom_mid #top_right
                        x: 0
                        y: -5
                        width: 100
                        height: 35
                        pad_all: 0
                        min_value: 0
                        max_value: 255
                        radius: 5px
                        knob:
                          bg_color: 0xffffff
                          radius: 5px
                          pad_left: 0px
                          pad_right: 0px
                          pad_top: 0px
                          pad_bottom: 0px
                        indicator:
                          radius: 0px
                          bg_color: 0xb1b1b1
                        on_release:
                          - homeassistant.action:
                              action: light.turn_on
                              data:
                                entity_id: light.schlafzimmerbett
                                brightness: !lambda return int(x);
                  on_click:
                      - homeassistant.service:
                          service: light.toggle
                          data:
                            entity_id: light.schlafzimmerbett

              - button:
                  id: office_heating_btn
                  checkable: true
                  grid_cell_column_pos: 2 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e90D
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Deko"
                        long_mode: dot
                        align: CENTER
                        y: 30
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.schlafzimmer_relay_2

              - button:
                  id: living_room_heating_btn
                  checkable: true
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e9c5
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Tisch"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - slider:
                        id: lv_button_2_slider
                        align: bottom_mid #top_right
                        x: 0
                        y: -5
                        width: 100
                        height: 35
                        pad_all: 0
                        min_value: 0
                        max_value: 255
                        radius: 5px
                        knob:
                          bg_color: 0xffffff
                          radius: 5px
                          pad_left: 0px
                          pad_right: 0px
                          pad_top: 0px
                          pad_bottom: 0px
                        indicator:
                          radius: 0px
                          bg_color: 0xb1b1b1
                        on_release:
                          - homeassistant.action:
                              action: light.turn_on
                              data:
                                entity_id: light.color_temperature_light_23
                                brightness: !lambda return int(x);
                  on_click:
                      - homeassistant.service:
                          service: light.toggle
                          data:
                            entity_id: light.color_temperature_light_23

              - button:
                  id: kids_heating_btn
                  checkable: true
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e950
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Diele"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: room_temp_label_diele
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        id: heating_icon_label_diele
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.diele_alle

              - button:
                  id: tv_btn
                  checkable: true
                  grid_cell_column_pos: 2
                  grid_cell_row_pos: 1
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        id: tv_icon
                        text_font: hass_hue_icons
                        text: "${television}"
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "TV"
                        align: CENTER
                        y: 30
                    # Watt-Anzeige oben rechts
                    - label:
                        id: tv_power_label
                        text: "W"
                        text_font: roboto12
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_color: 0xAAAAAA
                  on_value:
                    - if:
                        condition:
                          lambda: 'return x;'
                        then:
                          - homeassistant.service:
                              service: media_player.turn_on
                              data:
                                entity_id: media_player.tv_schlafzimmer_2
                        else:
                          - homeassistant.service:
                              service: media_player.turn_off
                              data:
                                entity_id: media_player.tv_schlafzimmer_2
                    - lambda: |-
                        // Animation zur Skalierung und Farbänderung
                        lv_anim_t a;
                        lv_anim_init(&a);
                        lv_anim_set_var(&a, id(tv_icon));
                        lv_anim_set_values(&a, 256, 307);
                        lv_anim_set_time(&a, 100);
                        lv_anim_set_exec_cb(&a, [](void * obj, int32_t v) {
                          lv_obj_set_style_transform_zoom((lv_obj_t *)obj, v, LV_PART_MAIN);
                          lv_color_t color = (v > 256) ? lv_color_hex(0x666666) : lv_color_hex(0xAAAAAA);
                          lv_obj_set_style_text_color((lv_obj_t *)obj, color, LV_PART_MAIN);
                        });
                        lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
                        lv_anim_set_playback_delay(&a, 100);
                        lv_anim_set_playback_time(&a, 100);
                        lv_anim_start(&a);
              # Lautstärkeanzeige – Mitte links
              - button:
                  id: volume_display
                  checkable: false
                  grid_cell_column_pos: 2
                  grid_cell_row_pos: 1
                  grid_cell_x_align: START
                  grid_cell_y_align: CENTER
                  width: 40
                  height: 40
                  bg_opa: 0%
                  widgets:
                    - label:
                        id: tv_volume_label
                        text: ""
                        text_font: roboto12
                        text_color: 0xAAAAAA
                        align: CENTER

              # Lautstärke hoch – oben links
              - button:
                  id: volume_up_btn
                  checkable: false
                  grid_cell_column_pos: 2
                  grid_cell_row_pos: 1
                  grid_cell_x_align: START
                  grid_cell_y_align: START
                  width: 40
                  height: 40
                  bg_opa: 0%
                  widgets:
                    - label:
                        id: volume_up_icon
                        text: "󰝝"
                        text_font: roboto12
                        text_color: 0xAAAAAA
                        align: CENTER
                  on_click:
                    - homeassistant.service:
                        service: media_player.volume_up
                        data:
                          entity_id: media_player.tv_schlafzimmer_2
                    - lambda: |-
                        lv_anim_t a;
                        lv_anim_init(&a);
                        lv_anim_set_var(&a, id(volume_up_icon));
                        lv_anim_set_values(&a, 256, 307);
                        lv_anim_set_time(&a, 100);
                        lv_anim_set_exec_cb(&a, [](void * obj, int32_t v) {
                          lv_obj_set_style_transform_zoom((lv_obj_t *)obj, v,               LV_PART_MAIN);
                          lv_color_t color = (v > 256) ? lv_color_hex(0x666666) : lv_color_hex(0xAAAAAA);
                          lv_obj_set_style_text_color((lv_obj_t *)obj, color, LV_PART_MAIN);
                        });
                        lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
                        lv_anim_set_playback_delay(&a, 100);
                        lv_anim_set_playback_time(&a, 100);
                        lv_anim_start(&a);

              # Lautstärke runter – unten links
              - button:
                  id: volume_down_btn
                  checkable: false
                  grid_cell_column_pos: 2
                  grid_cell_row_pos: 1
                  grid_cell_x_align: START
                  grid_cell_y_align: START
                  width: 40
                  height: 40
                  bg_opa: 8%
                  widgets:
                    - label:
                        id: volume_down_icon
                        text: "󰝞"
                        text_font: roboto12
                        text_color: 0xAAAAAA
                        align: BOTTOM_LEFT
                  on_click:
                    - homeassistant.service:
                        service: media_player.volume_down
                        data:
                          entity_id: media_player.tv_schlafzimmer_2
                    - lambda: |-
                        lv_anim_t a;
                        lv_anim_init(&a);
                        lv_anim_set_var(&a, id(volume_down_icon));
                        lv_anim_set_values(&a, 256, 307);
                        lv_anim_set_time(&a, 100);
                        lv_anim_set_exec_cb(&a, [](void * obj, int32_t v) {
                          lv_obj_set_style_transform_zoom((lv_obj_t *)obj, v, LV_PART_MAIN);
                          lv_color_t color = (v > 256) ? lv_color_hex(0x666666) : lv_color_hex(0xAAAAAA);
                          lv_obj_set_style_text_color((lv_obj_t *)obj, color, LV_PART_MAIN);
                        });
                        lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
                        lv_anim_set_playback_delay(&a, 100);
                        lv_anim_set_playback_time(&a, 100);
                        lv_anim_start(&a);

    - id: heating_page2
      widgets:
        - image:
            align: CENTER
            src: back4
        - obj: # a properly placed coontainer object for all these controls
            layout: # enable the GRID layout for the children widgets
              type: GRID # split the rows and the columns proportionally
              grid_columns: [FR(1), FR(1), FR(1)] # equal
              grid_rows: [FR(50), FR(50)] # like percents
            width: 100%
            height: 90%
            #align: CENTER
            pad_all: 15
            pad_top: 22
            #pad_row: 6
            #pad_column: 2
            bg_opa: TRANSP
            border_opa: TRANSP
            widgets:
              - button:
                  id: boiler_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e9df
                        align: CENTER
                        y: -20
                    - label:
                        id: room_temp_label_kueche
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        text_font: roboto24
                        text: "Küche"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    # Icon für Heizung oben links
                    - label:
                        id: heating_icon_label_kueche
                        text: "${radiator2}"
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080  # Initial: grau
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.kuche_alle

              - button:
                  id: bedroom_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: btn_icons_font
                        text: $ceiling_light
                        align: CENTER
                        y: -20
                    - label:
                        id: room_temp_label_esszimmer
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        text_font: roboto24
                        text: "Esszim."
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: heating_icon_label_esszimmer
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.esszimmer_decke

              - button:
                  id: living_room_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 2 # place the widget in
                  grid_cell_row_pos: 0 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $ceiling_light1
                        align: CENTER
                        y: -20
                    - label:
                        id: room_temp_label_wohnzimmer
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        text_font: roboto24
                        text: "Wohnzim."
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: heating_icon_label_wohnzimmer
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.wohnzimmer_relay_2

              - button:
                  id: office_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 0 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e9ed
                        align: CENTER
                        y: -20
                    - label:
                        id: room_temp_label_buero
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        text_font: roboto24
                        text: "Büro"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: heating_icon_label_buero
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.buro_relay_1

              - button:
                  id: kids_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 1 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: btn_icons_font
                        text: $coach_lamp
                        align: CENTER
                        y: -20
                    - label:
                        text_font: roboto24
                        text: "Haustür"
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: room_temp_label_haustuer
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.haustur

              - button:
                  id: bad_heating_btn1
                  checkable: true
                  grid_cell_column_pos: 2 # place the widget in
                  grid_cell_row_pos: 1 # the corresponding cell
                  grid_cell_x_align: STRETCH
                  grid_cell_y_align: STRETCH
                  widgets:
                    - label:
                        text_font: hass_hue_icons
                        text: $icon_e9f7
                        align: CENTER
                        y: -20
                    - label:
                        id: room_temp_label_bad
                        text: "$temp"
                        align: TOP_RIGHT
                        x: -3
                        y: 10
                        text_font: roboto12
                        text_color: 0xffffff
                    - label:
                        text: "Bad"
                        text_font: roboto24
                        long_mode: dot
                        align: CENTER
                        y: 30
                    - label:
                        id: heating_icon_label_bad
                        text: $radiator2
                        align: TOP_LEFT
                        x: 3
                        y: 10
                        text_font: roboto12
                        text_color: 0x808080
                  on_click:
                    - homeassistant.service:
                        service: light.toggle
                        data_template:
                          entity_id: light.schalter_badezimmer_unten_l1

    - id: page_thermostat
      bg_color: 0x111111 #color_black
      widgets:
        - label:
            text: "Heizung"
            align: TOP_MID
            y: 2
            text_font: roboto24
            text_color: 0xffffff
        - obj:
            bg_opa: TRANSP
            border_opa: TRANSP
            shadow_opa: TRANSP
            width: 480
            height: 480
            widgets:
              - meter:
                  height: 320
                  width: 320
                  border_width: 0
                  bg_opa: TRANSP
                  align: CENTER
                  scales:
                    - range_from: 15
                      range_to: 25
                      angle_range: 270
                      ticks:
                        width: 1
                        count: 41
                        length: 10
                        color: 0xffffff
                        major:
                          stride: 5
                          width: 5
                          length: 15
                          color: 0xffffff
                          label_gap: 15
                      indicators:
                        - tick_style:
                            start_value: 15
                            end_value: 25
                            color_start: 0x56acfa
                            color_end: 0xef382e
                            width: 1

              - arc:
                  id: arc_id1
                  align: CENTER
                  arc_width: 36
                  width: 400
                  height: 400
                  min_value: 15
                  max_value: 25
                  adjustable: true
                  adv_hittest: true
                  arc_opa: TRANSP
                  indicator:
                    arc_color: 0xef382e
                    arc_width: 40
                  knob:
                    border_color: 0xef382e
                    border_width: 8
                    bg_color: 0xa3333f
                  on_release:
                    - homeassistant.service:
                        service: climate.set_temperature
                        data:
                          entity_id: climate.thermostatbadezimmervorne
                          temperature: !lambda return x;

              - arc:
                  id: arc_sensor_temp
                  clickable: false
                  align: CENTER
                  arc_width: 24
                  width: 370
                  height: 370
                  min_value: 15
                  max_value: 25
                  value: 22
                  adjustable: true
                  arc_opa: TRANSP
                  indicator:
                    arc_opa: TRANSP
                  knob:
                    border_opa: TRANSP
                    bg_color: 0xffffff

              - obj:
                  align: CENTER
                  bg_color: 0x111111
                  border_opa: TRANSP
                  shadow_opa: TRANSP
                  width: 220
                  height: 220
                  radius: 110

              - label:
                  id: heating_icon
                  y: 40
                  align: CENTER
                  text_font: icons_24
                  text: "${heating}"

              - label:
                  id: thermostat_status
                  y: -80
                  x: 0
                  align: CENTER
                  text_font: nunito_24
                  text_color: 0xffffff #color_white
                  text: ""

              - label:
                  id: target_temperature_whole
                  x: -200
                  y: -20
                  align: RIGHT_MID
                  text_font: nunito_84
                  text_color: 0xffffff #color_white
                  text: " "

              - label:
                  id: target_temperature_fraction
                  x: 248
                  y: -5
                  align: LEFT_MID
                  text_font: nunito_36
                  text_color: 0xffffff #color_white
                  text: " "

              - label:
                  id: target_temperature_measurement
                  x: 245
                  y: -40
                  align: LEFT_MID
                  text_font: nunito_30
                  text_color: 0xffffff #color_white
                  text: "°C"

              - label:
                  id: sensor_temperature_thermostat_icon
                  y: 80
                  x: -37
                  align: CENTER
                  text_font: icons_24
                  text_color: 0xffffff #color_white
                  text: "${temperature}"

              - label:
                  id: sensor_temperature_thermostat
                  y: 80
                  x: 10
                  align: CENTER
                  text_font: nunito_20
                  text_color: 0xffffff #color_white
                  text: "0"

              - button:
                  x: 50
                  y: -40
                  width: 70
                  height: 70
                  bg_color: 0x111111 #color_black
                  border_color: 0xfafafa #0x848484 #color_gray
                  border_width: 5
                  shadow_opa: TRANSP
                  radius: 35
                  align: BOTTOM_MID
                  widgets:
                    - label:
                        y: -2
                        align: CENTER
                        text_font: nunito_48
                        text_color: 0xfafafa #0x848484 #color_gray
                        text: "+"
                  on_press:
                      then:
                        - lambda: |-
                            auto temp = id(thermostat_id1).state + 0.5;
                            id(thermostat_id1).publish_state(temp);
                        - homeassistant.service:
                            service: climate.set_temperature
                            data:
                              entity_id: climate.thermostatbadezimmervorne
                              temperature: !lambda 'return id(thermostat_id1).state;'
              - button:
                  x: -50
                  y: -40
                  width: 70
                  height: 70
                  bg_color: 0x111111 #color_black
                  border_color: 0xfafafa #0x848484 #color_gray
                  border_width: 5
                  shadow_opa: TRANSP
                  radius: 35
                  align: BOTTOM_MID
                  widgets:
                    - label:
                        y: -2
                        align: CENTER
                        text_font: nunito_48
                        text_color: 0xfafafa #0x848484 #color_gray
                        text: "-"
                  on_press:
                      then:
                        - lambda: |-
                            auto temp = id(thermostat_id1).state - 0.5;
                            id(thermostat_id1).publish_state(temp);
                        - homeassistant.service:
                            service: climate.set_temperature
                            data:
                              entity_id: climate.thermostatbadezimmervorne
                              temperature: !lambda 'return id(thermostat_id1).state;'


    - id: cover_page
      widgets:
        - image:
            align: CENTER
            src: back1
            widgets:
              - label:
                  text: "Rollladen"
                  align: TOP_MID
                  y: 2
                  text_font: roboto24
                  text_color: 0xffffff
              - button:
                  x: 80
                  y: 110
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_up_porche
                        align: CENTER
                        text: "$up"
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.open_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_links
              - button:
                  x: 80
                  y: 220
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_stop_porche
                        align: CENTER
                        text: STOP
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.stop_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_links
              - button:
                  x: 80
                  y: 330
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_down_porche
                        align: CENTER
                        text: "$down"
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.close_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_links

              - button:
                  x: 300
                  y: 330
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_up_porche1
                        align: CENTER
                        text: "$down"
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.open_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_rechts
              - button:
                  x: 300
                  y: 220
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_stop_porche1
                        align: CENTER
                        text: STOP
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.stop_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_rechts
              - button:
                  x: 300
                  y: 110
                  width: 100
                  height: 100
                  widgets:
                    - label:
                        id: volet_down_porche1
                        align: CENTER
                        text: "$up"
                        text_font: roboto24
                  on_press:
                    then:
                      - homeassistant.action:
                          action: cover.close_cover
                          data:
                            entity_id: cover.rolllade_schlafzimmer_rechts

#--------------------- Sensors -------------------
globals:
  - id: user_touched
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: is_nighttime
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: clock_page_shown
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: current_page
    type: int
    restore_value: no
    initial_value: '0'

  - id: last_manual_action
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: display_in_standby
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: is_standby_active
    type: bool
    restore_value: no
    initial_value: 'true'

#  - id: night_mode
#    type: bool
#    restore_value: no
#    initial_value: 'false'

  - id: dimmer_level
    type: int
    restore_value: no

  - id: aut_boiler
    type: std::string
  
  - id: aut_bedroom
    type: std::string
  
  - id: aut_living_room
    type: std::string
  
  - id: aut_office
    type: std::string
  
  - id: aut_kids
    type: std::string

  - id: aut_tv
    type: std::string

  - id: aut_boiler1
    type: std::string

  - id: aut_bedroom1
    type: std::string

  - id: aut_living_room1
    type: std::string

  - id: aut_office1
    type: std::string

  - id: aut_kids1
    type: std::string

  - id: aut_bad1
    type: std::string

time:
  - platform: homeassistant
    id: ha_time
    on_time:
      minutes: /1
      then:
        - lambda: |-
            auto time = id(ha_time).now();
            static char time_str[6];
            snprintf(time_str, sizeof(time_str), "%02d:%02d", time.hour, time.minute);
            static char date_str[32];
            const char* days[] = {"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"};
            snprintf(date_str, sizeof(date_str), "%s, %02d.%02d", days[time.day_of_week], time.day_of_month, time.month + 1);

number:
  - platform: template
    id: dimmer_val
    name: "dimmer val"
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 160
    optimistic: True
    internal: True
    on_value:
      then:
        - globals.set:
            id: dimmer_level
            value: !lambda 'return int(x);'
        - if:
            condition:
              lambda: 'return id(bedroom_heating_btn).state == true;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data_template:
                    entity_id: light.schlafzimmerbett
                    brightness: !lambda "return x;"
  
sensor:
  - platform: template
    name: "Panel User Touched"
    lambda: "return id(user_touched) ? 1 : 0;"
    update_interval: 5s

  - platform: homeassistant
    id: tv_volume
    entity_id: sensor.tv_volume
    on_value:
      then:
        - lvgl.label.update:
            id: tv_volume_label
            text: !lambda |-
              static char buffer[32];
              snprintf(buffer, sizeof(buffer), "$speaker %d%%", (int)id(tv_volume).state);
              return buffer;

  - platform: homeassistant
    id: tv_power_watts
    entity_id: sensor.tv_schlafzimmer_power
    on_value:
      then:
        - lvgl.label.update:
            id: tv_power_label
            text:
              format: "$watt %.0fW"
              args: [id(tv_power_watts).state]

  - platform: homeassistant
    id: sensor_temperature_haustuer
    entity_id: sensor.blink_kamera_terrasse_temperatur
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_haustuer
            text:
              format: "$temp %.1f °C" #format: "$temp %.1f °C"
              args: [id(sensor_temperature_haustuer).state]

  - platform: homeassistant
    id: haustuer_temperature
    entity_id: sensor.blink_kamera_terrasse_temperatur

  - platform: homeassistant
    id: sensor_temperature_diele
    entity_id: sensor.diele_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_diele
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_diele).state]

  - platform: homeassistant
    id: diele_temperature
    entity_id: sensor.diele_temperature

  - platform: homeassistant
    id: sensor_temperature_esszimmer
    entity_id: sensor.esszimmer_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_esszimmer
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_esszimmer).state]

  - platform: homeassistant
    id: esszimmer_temperature
    entity_id: sensor.esszimmer_temperature

  - platform: homeassistant
    id: sensor_temperature_wohnzimmer
    entity_id: sensor.wohnzimmer_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_wohnzimmer
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_wohnzimmer).state]

  - platform: homeassistant
    id: wohnzimmer_temperature
    entity_id: sensor.wohnzimmer_temperature

  - platform: homeassistant
    id: sensor_temperature_bad
    entity_id: sensor.bad_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_bad
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_bad).state]

  - platform: homeassistant
    id: bad_temperature
    entity_id: sensor.bad_temperature

  - platform: homeassistant
    id: sensor_temperature_kueche
    entity_id: sensor.kueche_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_kueche
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_kueche).state]

  - platform: homeassistant
    id: kueche_temperature
    entity_id: sensor.kueche_temperature

  - platform: homeassistant
    id: sensor_temperature_buero
    entity_id: sensor.buero_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label_buero
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_buero).state]

  - platform: homeassistant
    id: buero_temperature
    entity_id: sensor.buero_temperature

  - platform: homeassistant
    id: sensor_temperature_schlafzimmer
    entity_id: sensor.schlafzimmer_temperature
    on_value:
      then:
        - lvgl.label.update:
            id: room_temp_label
            text:
              format: "$temp %.1f °C"
              args: [id(sensor_temperature_schlafzimmer).state]

  - platform: homeassistant
    id: schlafzimmer_temperature
    entity_id: sensor.schlafzimmer_temperature

  - platform: homeassistant
    id: button_1_device_brightness
    entity_id: light.schlafzimmerbett
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: lv_button_1_slider
          value: !lambda return x;

  - platform: homeassistant
    id: button_2_device_brightness
    entity_id: light.color_temperature_light_23
    attribute: brightness
    on_value:
      - lvgl.slider.update:
          id: lv_button_2_slider
          value: !lambda return x;

  - platform: homeassistant
    id: volet_porche_pos
    entity_id: cover.rolllade_schlafzimmer_links
    attribute: current_position
    on_value:
      - if:
          condition:
            lambda: |-
              return x == 100;
          then:
            - lvgl.widget.update:
                id: volet_up_porche
                text_opa: 60%
          else:
            - lvgl.widget.update:
                id: volet_up_porche
                text_opa: 100%
      - if:
          condition:
            lambda: |-
              return x == 0;
          then:
            - lvgl.widget.update:
                id: volet_down_porche
                text_opa: 60%
          else:
            - lvgl.widget.update:
                id: volet_down_porche
                text_opa: 100%
  - platform: homeassistant
    id: volet_porche_pos1
    entity_id: cover.rolllade_schlafzimmer_rechts
    attribute: current_position
    on_value:
      - if:
          condition:
            lambda: |-
              return x == 100;
          then:
            - lvgl.widget.update:
                id: volet_up_porche1
                text_opa: 60%
          else:
            - lvgl.widget.update:
                id: volet_up_porche1
                text_opa: 100%
      - if:
          condition:
            lambda: |-
              return x == 0;
          then:
            - lvgl.widget.update:
                id: volet_down_porche1
                text_opa: 60%
          else:
            - lvgl.widget.update:
                id: volet_down_porche1
                text_opa: 100%
  # Temperature Home Sensor
  - platform: homeassistant
    id: sensor_temperature
    entity_id: sensor.schlafzimmer_temperature # Change the entity from your Home Assistant
    on_value:
      then:
        - lvgl.label.update:
            id: sensor_temperature_thermostat
            text:
              format: "%.1f°C"
              args: [id(sensor_temperature).state]

        - lvgl.arc.update:
            id: arc_sensor_temp
            value: !lambda return x;
  # Thermostat temperature
  - platform: homeassistant
    id: thermostat_id1
    entity_id: climate.thermostatbadezimmervorne # Change the entity from your Home Assistant
    attribute: temperature
    on_value:
      then:
        - lvgl.arc.update:
            id: arc_id1
            value: !lambda return x;

        - lvgl.label.update:
            id: target_temperature_whole
            text: !lambda |-
              static char buf[10];
              int whole_part = static_cast<int>(id(thermostat_id1).state);
              snprintf(buf, 10, "%d", whole_part);
              return buf;

        - lvgl.label.update:
            id: target_temperature_fraction
            text: !lambda |-
              static char buf[10];
              int whole_part = static_cast<int>(id(thermostat_id1).state);
              int fractional_part = static_cast<int>((id(thermostat_id1).state - whole_part) * 10);
              snprintf(buf, 10, ".%01d", fractional_part);
              return buf;

  - platform: homeassistant
    id: ha_current_temp
    entity_id: climate.thermostatbadezimmervorne
    attribute: current_temperature

  - platform: homeassistant
    id: ha_target_temp
    entity_id: climate.thermostatbadezimmervorne
    attribute: temperature

# 1. dBm-Rohwert
  - platform: wifi_signal
    id: wifi_signal_dbm
    name: "WiFi Signal (dBm)"
    update_interval: 180s

# 2. Prozentwert für Anzeige
  - platform: wifi_signal
    id: wifi_signal_percent
    name: "WiFi Signal (%)"
    update_interval: 180s
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    on_value:
      then:
        - lvgl.label.update:
            id: wifi_status
            text_color: !lambda |-
              return id(wifi_signal_dbm).state > -90 ? lv_color_hex(0x00FF00) : lv_color_hex(0x333333);
            text: !lambda |-
              float dBm = id(wifi_signal_dbm).state;
              if (dBm > -50) return "${wifi_100}";
              if (dBm > -60) return "${wifi_75}";
              if (dBm > -70) return "${wifi_50}";
              return "${wifi_25}";


  - platform: uptime
    id: uptime_internal

  - platform: homeassistant
    id: temp_schlafzimmer
    entity_id: sensor.schlafzimmer_temperature

  - platform: homeassistant
    id: house_temp_sensor
    entity_id: sensor.schlafzimmer_temperature
    on_value:
      then:
         - lvgl.label.update:
            id: display_house_temp
            text:
              format: "$house_temp %.1f °C"
              args: ["id(house_temp_sensor).state"]

  - platform: homeassistant
    id: uv_sensor
    entity_id: sensor.home_uv_index
    on_value:
      then:
         - lvgl.label.update:
            id: display_uv_index
            text:
              format: "$uv_state %.1f%%"
              args: ["id(uv_sensor).state"]

text_sensor:
  - platform: homeassistant
    name: "TV Status"
    id: tv_status
    entity_id: media_player.tv_schlafzimmer_2

  - platform: homeassistant
    id: tv_status_sensor
    entity_id: media_player.tv_schlafzimmer_2

  - platform: homeassistant
    id: heating_status_sensor
    entity_id: climate.thermostatbadezimmervorne
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label
                        text: $radiator
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_kueche
    entity_id: climate.thermostatkueche
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_kueche).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_kueche
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_kueche).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_kueche
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_kueche
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_esszimmer
    entity_id: climate.esszimmer
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_esszimmer).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_esszimmer
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_esszimmer).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_esszimmer
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_esszimmer
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_diele
    entity_id: climate.diele1
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_diele).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_diele
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_diele).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_diele
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_diele
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_wohnzimmer
    entity_id: climate.garderobe
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_wohnzimmer).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_wohnzimmer
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_wohnzimmer).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_wohnzimmer
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_wohnzimmer
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_buero
    entity_id: climate.schlafzimmer2
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_buero).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_buero
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_buero).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_buero
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_buero
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: heating_status_sensor_bad
    entity_id: climate.bad_neu
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(heating_status_sensor_bad).state == "heating";'
            then:
              - lvgl.label.update:
                  id: heating_icon_label_bad
                  text: $radiator2
                  text_color: 0xFF0000  # Rot
            else:
              - if:
                  condition:
                    lambda: 'return id(heating_status_sensor_bad).state == "idle";'
                  then:
                    - lvgl.label.update:
                        id: heating_icon_label_bad
                        text: $radiator2
                        text_color: 0x56acfa  # Blau
                  else:
                    - lvgl.label.update:
                        id: heating_icon_label_bad
                        text: $power_off
                        text_color: 0x808080  # Grau

  - platform: homeassistant
    id: thermostat_action
    entity_id: climate.thermostatbadezimmervorne
    attribute: hvac_action

  - platform: homeassistant
    id: volet_porche_state
    entity_id: sensor.position_rolllade_schlafzimmer_links
    on_value:
      - if:
          condition:
            lambda: |-
              return ((0 == x.compare(std::string{"opening"})) or (0 == x.compare(std::string{"closing"})));
          then:
            - lvgl.label.update:
                id: volet_stop_porche
                text: "STOP"
          else:
            - lvgl.label.update:
                id: volet_stop_porche
                text:
                  format: "%.0f%%"
                  args: [ 'id(volet_porche_pos).get_state()' ]
  - platform: homeassistant
    id: volet_porche_state1
    entity_id: sensor.position_rolllade_schlafzimmer_rechts
    on_value:
      - if:
          condition:
            lambda: |-
              return ((0 == x.compare(std::string{"opening"})) or (0 == x.compare(std::string{"closing"})));
          then:
            - lvgl.label.update:
                id: volet_stop_porche1
                text: "STOP"
          else:
            - lvgl.label.update:
                id: volet_stop_porche1
                text:
                  format: "%.0f%%"
                  args: [ 'id(volet_porche_pos1).get_state()' ]
  # Motion Sensor #
  - platform: homeassistant
    id: sensor_motion
    entity_id: binary_sensor.bewegungsmelder_schlafzimmer # Change the entity from your Home Assistant
    on_value:
      then:
        - lvgl.label.update:
            id: motion_status
            text_color: !lambda |-
              if (id(sensor_motion).state == "on") {
              return lv_color_hex(0x56acfa);
              }
              return lv_color_hex(0x333333);

  - platform: homeassistant
    id: heating_action
    entity_id: climate.thermostatbadezimmervorne
    attribute: hvac_action
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x == "heating";'
            then:
              - lvgl.widget.show: heating_status
            else:
              - lvgl.widget.hide: heating_status

  - platform: homeassistant
    id: ha_time_string
    entity_id: sensor.time
    on_value:
      then:
        - lvgl.label.update:
            id: display_time
            text: !lambda 'return id(ha_time_string).state.c_str();'

  - platform: homeassistant
    id: ha_date
    entity_id: sensor.date
    on_value:
      then:
        - lvgl.label.update:
            id: display_date
            text: !lambda |-
              std::string date_str = id(ha_date).state;  // "2025-04-30"
              std::tm timeinfo = {};
              strptime(date_str.c_str(), "%Y-%m-%d", &timeinfo);
              const char* wochentage[] = {"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"};
              char buffer[32];
              snprintf(buffer, sizeof(buffer), "%s, %02d.%02d", wochentage[timeinfo.tm_wday], timeinfo.tm_mday, timeinfo.tm_mon + 1);
              return std::string(buffer);

  - platform: homeassistant
    id: ha_date_standby
    entity_id: sensor.date
    on_value:
      then:
        - lvgl.label.update:
            id: display_date_standby
            text: !lambda |-
              std::string date_str = id(ha_date_standby).state;  // z. B. "2025-05-07"
              std::tm timeinfo = {};
              strptime(date_str.c_str(), "%Y-%m-%d", &timeinfo);
              mktime(&timeinfo);  // <-- berechnet Wochentag korrekt
              const char* wochentage[] = {"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"};
              const char* monate[] = {"Januar", "Februar", "März", "April", "Mai", "Juni",
                                      "Juli", "August", "September", "Oktober", "November", "Dezember"};
              char buffer[40];
              snprintf(buffer, sizeof(buffer), "%s, %02d. %s",
                       wochentage[timeinfo.tm_wday],
                       timeinfo.tm_mday,
                       monate[timeinfo.tm_mon]);
              return std::string(buffer);

  - platform: homeassistant
    id: ha_weather_cond
    entity_id: weather.pirateweather
    on_value:
      then:
        - lvgl.label.update:
            id: display_weather
            text: !lambda |-
              std::string condition = id(ha_weather_cond).state;
              if (condition == "clear-night") return "Klarer Abend";
              if (condition == "clear-day") return "Sonnig";
              if (condition == "sunny") return "Sonnig";
              if (condition == "partly-cloudy-night") return "Teilw. bewölkt (Nacht)";
              if (condition == "partly-cloudy-day") return "Teilw. bewölkt";
              if (condition == "partlycloudy") return "Teilw. bewölkt";
              if (condition == "cloudy") return "Bewölkt";
              if (condition == "rainy") return "Regen";
              if (condition == "fog") return "Nebel";
              if (condition == "windy") return "Windig";
              if (condition == "snow") return "Schnee";
              if (condition == "hail") return "Hagel";
              if (condition == "thunderstorm") return "Gewitter";
              return "Unbekannt";

  - platform: homeassistant
    id: ha_weather_cond_standby
    entity_id: weather.pirateweather
    on_value:
      then:
        - lvgl.label.update:
            id: display_weather_standby
            text: !lambda |-
              std::string condition = id(ha_weather_cond_standby).state;
              if (condition == "clear-night") return "Klarer Abend";
              if (condition == "clear-day") return "Sonnig";
              if (condition == "sunny") return "Sonnig";
              if (condition == "partly-cloudy-night") return "Teilw. bewölkt (Nacht)";
              if (condition == "partly-cloudy-day") return "Teilw. bewölkt";
              if (condition == "partlycloudy") return "Teilw. bewölkt";
              if (condition == "cloudy") return "Bewölkt";
              if (condition == "rainy") return "Regen";
              if (condition == "fog") return "Nebel";
              if (condition == "windy") return "Windig";
              if (condition == "snow") return "Schnee";
              if (condition == "hail") return "Hagel";
              if (condition == "thunderstorm") return "Gewitter";
              return "Unbekannt";

  - platform: template
    id: weather_condition_icon
    lambda: |-
      std::string state = id(ha_weather_cond).state;
      if (state == "clear-night") return std::string("$night");
      if (state == "clear-day") return std::string("$sunny");
      if (state == "sunny") return std::string("$sunny");
      if (state == "partly-cloudy-night") return std::string("$nightpartlycloudy");
      if (state == "partly-cloudy-day") return std::string("$partlycloudy");
      if (state == "partlycloudy") return std::string("$partlycloudy");
      if (state == "cloudy") return std::string("$cloudy");
      if (state == "rainy") return std::string("$pouring");
      if (state == "fog") return std::string("$fog");
      if (state == "windy") return std::string("$windy");
      if (state == "snow") return std::string("$snowy");
      if (state == "hail") return std::string("$hail");
      if (state == "thunderstorm") return std::string("$lightning");
      return std::string("$happyface");
    update_interval: 30s
    on_value:
      then:
#        - logger.log: id(weather_condition_icon).state.c_str()
        - lvgl.label.update:
            id: display_weather_icon
            text: !lambda return id(weather_condition_icon).state.c_str();

  - platform: template
    id: weather_condition_icon_standby
    lambda: |-
      std::string state = id(ha_weather_cond).state;
      if (state == "clear-night") return std::string("$night");
      if (state == "clear-day") return std::string("$sunny");
      if (state == "sunny") return std::string("$sunny");
      if (state == "partly-cloudy-night") return std::string("$nightpartlycloudy");
      if (state == "partly-cloudy-day") return std::string("$partlycloudy");
      if (state == "partlycloudy") return std::string("$partlycloudy");
      if (state == "cloudy") return std::string("$cloudy");
      if (state == "rainy") return std::string("$pouring");
      if (state == "fog") return std::string("$fog");
      if (state == "windy") return std::string("$windy");
      if (state == "snow") return std::string("$snowy");
      if (state == "hail") return std::string("$hail");
      if (state == "thunderstorm") return std::string("$lightning");
      return std::string("$happyface");
    update_interval: 30s
    on_value:
      then:
#        - logger.log:
#            format: "Icon gesetzt: %s"
#            args: [ id(weather_condition_icon_standby).state.c_str() ]
        - lvgl.label.update:
            id: display_weather_icon_standby
            text: !lambda 'return id(weather_condition_icon_standby).state;'

  - platform: homeassistant
    id: ha_weather_temp
    entity_id: weather.pirateweather
    attribute: temperature
    on_value:
      then:
        - lvgl.label.update:
            id: display_temp
            text:
              format: "\U000F050F %s °C"
              args: ["id(ha_weather_temp).state.c_str()"]

  - platform: homeassistant
    id: ha_weather_temp_standby
    entity_id: weather.pirateweather
    attribute: temperature
    on_value:
      then:
        - lvgl.label.update:
            id: display_temp_standby
            text:
              format: "\U000F050F %s °C"
              args: ["id(ha_weather_temp).state.c_str()"]

  - platform: template
    name: Uptime
    lambda: |-
      int seconds = (id(uptime_internal).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { ( std::to_string(days) + "d " + std::to_string(hours) + "h " + std::to_string(minutes) + "m " + std::to_string(seconds) + "s").c_str() };
    icon: mdi:clock-start
    update_interval: 60s

binary_sensor:
  - platform: homeassistant
    id: light_status_kueche
    entity_id: light.kuche_alle
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status_kueche).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label_kueche
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label_kueche
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: light_status_esszimmer
    entity_id: light.esszimmer_decke
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status_esszimmer).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label_esszimmer
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label_esszimmer
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: light_status_wohnzimmer
    entity_id: light.wohnzimmer_relay_2
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status_wohnzimmer).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label_wohnzimmer
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label_wohnzimmer
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: light_status_buero
    entity_id: light.buro_relay_1
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status_buero).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label_buero
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label_buero
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: light_status
    entity_id: light.schlafzimmer_relay_1
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: light_status_bad
    entity_id: light.schalter_badezimmer_unten_l1
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(light_status_bad).state;'
            then:
              - lvgl.label.update:
                  id: room_temp_label_bad
                  text_color: 0x56acfa  # Blau wenn Licht an
            else:
              - lvgl.label.update:
                  id: room_temp_label_bad
                  text_color: 0xffffff  # Weiß wenn Licht aus

  - platform: homeassistant
    id: ha_heating_active
    entity_id: climate.thermostatbadezimmervorne
    on_state:
      then:
        - if:
            condition:
              lambda: return id(ha_heating_active).state;
            then:
              - lvgl.widget.show: heating_status
            else:
              - lvgl.widget.hide: heating_status

  - platform: homeassistant
    id: living_room_light_l1
    entity_id: light.schlafzimmer_relay_1
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: living_room_light_l1_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: living_room_light_l2
    entity_id: light.schlafzimmerbett
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: living_room_light_l2_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: living_room_light_l3
    entity_id: light.color_temperature_light_23
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: living_room_light_l3_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: boiler_heating
    entity_id: light.schlafzimmer_relay_1
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: boiler_heating_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_bedroom_sensor
    entity_id: light.schlafzimmerbett
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: bedroom_heating_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_living_room_sensor
    entity_id: light.color_temperature_light_23
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: living_room_heating_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_office_sensor
    entity_id: light.schlafzimmer_relay_2
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: office_heating_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_kids_sensor
    entity_id: light.diele_alle
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: kids_heating_btn
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_tv_sensor
    entity_id: media_player.tv_schlafzimmer_2
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: tv_btn
            state:
              checked: !lambda "return x;"
###############################################################
  - platform: homeassistant
    id: aut_boiler_sensor1
    entity_id: light.kuche_alle
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: boiler_heating_btn1
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_bedroom_sensor1
    entity_id: light.esszimmer_decke
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: bedroom_heating_btn1
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_living_room_sensor1
    entity_id: light.wohnzimmer_relay_2
    publish_initial_state: true
    on_state:
      then:
        - lvgl.widget.update:
            id: living_room_heating_btn1
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_office_sensor1
    entity_id: light.buro_relay_1
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: office_heating_btn1
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_kids_sensor1
    entity_id: light.haustur
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: kids_heating_btn1
            state:
              checked: !lambda "return x;"

  - platform: homeassistant
    id: aut_bad_sensor1
    entity_id: light.schalter_badezimmer_unten_l1
    publish_initial_state: true
    internal: true
    on_state:
      then:
        - lvgl.widget.update:
            id: bad_heating_btn1
            state:
              checked: !lambda "return x;"

# Internal outputs
#-------------------------------------------
output:
  # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: GPIO38
    frequency: 100Hz

    # Built in 240v relay
  - id: internal_relay_1
    platform: gpio
    pin: 40

    # Additional relays (3 relay model)
  - id: internal_relay_2
    platform: gpio
    pin: 2
  - id: internal_relay_3
    platform: gpio
    pin: 1
#-------------------------------------------
# LIGHTS
#-------------------------------------------
light:
  - platform: monochromatic
    output: GPIO38
    name: Backlight
    id: backlight
    restore_mode: ALWAYS_ON

#  - platform: monochromatic
#    output: led_gpio38
#    name: Backlight
#    id: status_led
#    restore_mode: ALWAYS_ON
  
#  - platform: binary
#    name: "Panel Switch"
#    id: panel_switch
#    output: panel_output

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  - id: bus_a
    sda: GPIO19
    scl: GPIO45
    #frequency: 100kHz
    
touchscreen:
  platform: gt911
  transform:
    mirror_x: false
    mirror_y: false
  id: my_touchscreen
  display: my_display
  on_touch:
    then:
      - script.execute: touch_wakeup

interval:
# prüft morgens alle 2 Minuten, ob Nacht vorbei ist
  - interval: 2min
    then:
      - lambda: |-
          auto now = id(ha_time).now();
          if (now.hour == 7 && now.minute == 0 && id(is_nighttime)) {
            id(screen_light).execute();
          }

  # 1. Clock-Page anzeigen, wenn hell
  - interval: 10s
    then:
      - lambda: |-
          if (!id(is_standby_active) && id(backlight).current_values.get_brightness() > 0.89f && !id(clock_page_shown)) {
            id(clock_page_shown) = true;
            id(my_clock_page_script).execute();
          } else if (id(backlight).current_values.get_brightness() <= 0.89f) {
            id(clock_page_shown) = false;
          }

# 2. Nur nachts regelmäßig standby prüfen (nur wenn nicht schon standby aktiv)
  - interval: 1min
    then:
      - lambda: |-
          auto now = id(ha_time).now();
          if ((now.hour >= 23 || now.hour < 1) && !id(is_standby_active)) {
            id(screen_light).execute();
          }

  # 3. Uhrzeit + Datum auf Standby-Seite
  - interval: 30s
    then:
      - lvgl.label.update:
          id: standby_time
          text:
            time_format: "%H:%M"
            time: ha_time
      - lvgl.label.update:
          id: display_date_standby
          text:
            time_format: "%d.%m.%Y"
            time: ha_time


  # 4. Standby-Seite alle 2 Min anzeigen (wenn nicht aktiv)
  - interval: 2min
    then:
      - if:
          condition:
            lambda: 'return !id(is_standby_active);'
          then:
            - lambda: 'id(is_standby_active) = true;'
            - lambda: 'id(display_in_standby) = true;'
            - lvgl.page.show: standby_page


  # 5. Heizungsstatus aktualisieren
  - interval: 30s
    then:
      - if:
          condition:
            lambda: 'return id(thermostat_action).state == "heating";'
          then:
            - script.execute: therm_status_update_on
          else:
            - script.execute: therm_status_update_off

  # 6. Morgens um 07:00 Uhr aus dem Nacht-Standby zurückkehren
  - interval: 1min
    then:
      - lambda: |-
          auto now = id(ha_time).now();
          if (now.hour == 7 && now.minute == 0 && id(is_nighttime)) {
            id(screen_light).execute();
          }

script:
  - id: wake_display_light_only
    mode: restart
    then:
      - lambda: |-
          auto now = id(ha_time).now();
          bool is_night = (now.hour >= 23 || now.hour < 7);
          float current = id(backlight).current_values.get_brightness();
          if (current < 0.01f || !id(backlight).current_values.is_on()) {
            float target = is_night ? 0.35f : 0.9f;
            id(backlight).turn_on().set_brightness(target);
          }

  - id: touch_wakeup
    mode: restart
    then:
      - lambda: |-
          id(user_touched) = true;
          id(is_standby_active) = false;
          id(display_in_standby) = false;
      - script.execute: reset_clock_timer
      - script.execute: reset_user_touched
      - script.execute: wake_display_light_only

  - id: reset_user_touched
    mode: restart
    then:
      - delay: 30s
      - lambda: 'id(user_touched) = false;'

  - id: return_to_home
    mode: restart
    then:
      - lvgl.page.show: clock_page

  - id: reset_clock_timer
    mode: restart
    then:
      - delay: 30s
      - lambda: |-
          if (!id(is_standby_active) && !id(is_nighttime)) {
            id(my_clock_page_script).execute();
          }

  - id: my_clock_page_script
    mode: restart
    then:
      - lvgl.page.show: clock_page

  - id: screen_light
    mode: restart
    then:
      - lambda: |-
          auto now = id(ha_time).now();
          id(is_nighttime) = (now.hour >= 23 || now.hour < 7);
      - if:
          condition:
            lambda: 'return id(is_nighttime);'
          then:
            - if:
                condition:
                  lambda: 'return !id(display_in_standby);'
                then:
                  - lambda: 'id(display_in_standby) = true;'
                  - lambda: 'id(is_standby_active) = true;'
            - lvgl.page.show: standby_page
      - if:
          condition:
            lambda: 'return !id(is_nighttime);'
          then:
            - if:
                condition:
                  lambda: 'return id(display_in_standby);'
                then:
                  - lambda: 'id(display_in_standby) = false;'
                  - lambda: 'id(is_standby_active) = false;'
            - light.turn_on:
                id: backlight
                brightness: 0.92
                transition_length: 1s
            - script.execute: my_clock_page_script

  - id: therm_status_update_on
    then:
      - lvgl.label.update:
          id: thermostat_status
          text_color: 0xea6733
          text: !lambda return "Heizen";
      - lvgl.label.update:
          id: heating_icon
          text_color: 0xea6733
          text: "$heating"  # oder dein FontIcon

  - id: therm_status_update_off
    then:
      - lvgl.label.update:
          id: thermostat_status
          text_color: 0xffffff
          text: !lambda return "Aus";
      - lvgl.label.update:
          id: heating_icon
          text_color: 0x56acfa
          text: "$heating"


#-------------------------------------------
# Display st7701s spi
#-------------------------------------------
spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

display:
  - platform: st7701s
    id: my_display
    update_interval: never
    data_rate: 2MHz
    spi_mode: MODE3
    color_order: RGB
    invert_colors: false
    dimensions:
      width: 480
      height: 480
    transform:
      mirror_x: false
      mirror_y: false
    cs_pin: 39
      # reset not defined
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    init_sequence:
      - 1
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      - [0xCD, 0x00] # disable MDT flag
    pclk_frequency: 12MHz
    pclk_inverted: false
    data_pins:
      red:
        - 11         # R1
        - 12         # R2
        - 13         # R3
        - 14         # R4
        - 0          # R5
      green:
        - 8          # G0
        - 20         # G1
        - 3          # G2
        - 46         # G3
        - 9          # G4
        - 10         # G5
      blue:
        - 4          # B1
        - 5          # B2
        - 6          # B3
        - 7          # B4
        - 15         # B5

